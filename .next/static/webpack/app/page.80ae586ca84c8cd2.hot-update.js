"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/service/getAllJobs.js":
/*!***********************************!*\
  !*** ./app/service/getAllJobs.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getBlogs: function() { return /* binding */ getBlogs; },\n/* harmony export */   getJobs: function() { return /* binding */ getJobs; }\n/* harmony export */ });\nasync function getJobs() {\n    try {\n        const response = await fetch(\"https://bec-nextjs.netlify.app/api/alls\", {\n            next: {\n                revalidate: 300\n            }\n        });\n        const data = await response.json();\n        // console.log(data)\n        return data;\n    } catch (error) {\n        console.log(\"get all jobs error\", error);\n        return false;\n    }\n}\n// export async function getCachedJobs() {\n//   try {\n//     const response = await fetch(\"https://bec-new.netlify.app/api/all\")\n//     const data = await response.json()\n//     return data\n//   } catch (error) {\n//     console.log('get job error', error)\n//     return false\n//   }\n// }\n// export async function jobsByType(value){\n//     const response = await fetch(\"https://bec-new.netlify.app/api/all\")\n//     const data = await response.json()\n//     const filterJobs = data.filter((data) =>{\n//       if(data.Tags == value){\n//         return data;\n//       }\n//     })\n//     const jobs = filterJobs?.slice(0, 5)\n// \treturn jobs\n// }\nasync function getBlogs() {\n    try {\n        const response = await fetch(\"https://bec-new.netlify.app/api/blogs\");\n        const data = await response.json();\n        console.log(\"posts\", data);\n        return data;\n    } catch (error) {\n        console.log(\"get post error\", error);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9zZXJ2aWNlL2dldEFsbEpvYnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFTyxlQUFlQTtJQUNsQixJQUFJO1FBQ0YsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLDJDQUEyQztZQUFFQyxNQUFNO2dCQUFFQyxZQUFZO1lBQUk7UUFBRTtRQUNsRyxNQUFNQyxPQUFPLE1BQU1KLFNBQVNLLElBQUk7UUFDaEMsb0JBQW9CO1FBQ3BCLE9BQU9EO0lBQ1gsRUFBRSxPQUFPRSxPQUFPO1FBQ2RDLFFBQVFDLEdBQUcsQ0FBQyxzQkFBc0JGO1FBQ2xDLE9BQU87SUFDVDtBQUVKO0FBS0EsMENBQTBDO0FBQzFDLFVBQVU7QUFDViwwRUFBMEU7QUFDMUUseUNBQXlDO0FBQ3pDLGtCQUFrQjtBQUNsQixzQkFBc0I7QUFDdEIsMENBQTBDO0FBQzFDLG1CQUFtQjtBQUNuQixNQUFNO0FBRU4sSUFBSTtBQUNKLDJDQUEyQztBQUMzQywwRUFBMEU7QUFDMUUseUNBQXlDO0FBRXpDLGdEQUFnRDtBQUNoRCxnQ0FBZ0M7QUFDaEMsdUJBQXVCO0FBQ3ZCLFVBQVU7QUFDVixTQUFTO0FBQ1QsMkNBQTJDO0FBQzNDLGVBQWU7QUFDZixJQUFJO0FBRUcsZUFBZUc7SUFDcEIsSUFBRztRQUNELE1BQU1ULFdBQVcsTUFBTUMsTUFBTTtRQUM3QixNQUFNRyxPQUFPLE1BQU1KLFNBQVNLLElBQUk7UUFDaENFLFFBQVFDLEdBQUcsQ0FBQyxTQUFTSjtRQUNyQixPQUFPQTtJQUNULEVBQUUsT0FBTUUsT0FBTztRQUNiQyxRQUFRQyxHQUFHLENBQUMsa0JBQWtCRjtJQUNoQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9zZXJ2aWNlL2dldEFsbEpvYnMuanM/MWQ4YSJdLCJzb3VyY2VzQ29udGVudCI6WyJcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldEpvYnMoKXtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChcImh0dHBzOi8vYmVjLW5leHRqcy5uZXRsaWZ5LmFwcC9hcGkvYWxsc1wiLCB7IG5leHQ6IHsgcmV2YWxpZGF0ZTogMzAwIH0gfSlcbiAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgICAgICAvLyBjb25zb2xlLmxvZyhkYXRhKVxuICAgICAgICByZXR1cm4gZGF0YSBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5sb2coJ2dldCBhbGwgam9icyBlcnJvcicsIGVycm9yKVxuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG59XG5cblxuXG5cbi8vIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRDYWNoZWRKb2JzKCkge1xuLy8gICB0cnkge1xuLy8gICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCJodHRwczovL2JlYy1uZXcubmV0bGlmeS5hcHAvYXBpL2FsbFwiKVxuLy8gICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbi8vICAgICByZXR1cm4gZGF0YVxuLy8gICB9IGNhdGNoIChlcnJvcikge1xuLy8gICAgIGNvbnNvbGUubG9nKCdnZXQgam9iIGVycm9yJywgZXJyb3IpXG4vLyAgICAgcmV0dXJuIGZhbHNlXG4vLyAgIH1cblxuLy8gfVxuLy8gZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGpvYnNCeVR5cGUodmFsdWUpe1xuLy8gICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXCJodHRwczovL2JlYy1uZXcubmV0bGlmeS5hcHAvYXBpL2FsbFwiKVxuLy8gICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcblxuLy8gICAgIGNvbnN0IGZpbHRlckpvYnMgPSBkYXRhLmZpbHRlcigoZGF0YSkgPT57XG4vLyAgICAgICBpZihkYXRhLlRhZ3MgPT0gdmFsdWUpe1xuLy8gICAgICAgICByZXR1cm4gZGF0YTtcbi8vICAgICAgIH1cbi8vICAgICB9KVxuLy8gICAgIGNvbnN0IGpvYnMgPSBmaWx0ZXJKb2JzPy5zbGljZSgwLCA1KVxuLy8gXHRyZXR1cm4gam9ic1xuLy8gfVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0QmxvZ3MoKXtcbiAgdHJ5e1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYmVjLW5ldy5uZXRsaWZ5LmFwcC9hcGkvYmxvZ3MnKVxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICBjb25zb2xlLmxvZygncG9zdHMnLCBkYXRhKVxuICAgIHJldHVybiBkYXRhXG4gIH0gY2F0Y2goZXJyb3IpIHtcbiAgICBjb25zb2xlLmxvZygnZ2V0IHBvc3QgZXJyb3InLCBlcnJvcilcbiAgfVxufSJdLCJuYW1lcyI6WyJnZXRKb2JzIiwicmVzcG9uc2UiLCJmZXRjaCIsIm5leHQiLCJyZXZhbGlkYXRlIiwiZGF0YSIsImpzb24iLCJlcnJvciIsImNvbnNvbGUiLCJsb2ciLCJnZXRCbG9ncyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/service/getAllJobs.js\n"));

/***/ })

});